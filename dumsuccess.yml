AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function with cfn-response.
Resources:
  ExampleLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.8
      Role: rolename
      Handler: index.lambda_handler
      FunctionName: "cfnfunction"
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          def lambda_handler(event, context):
              print("welcome to cloud formation")
              print(event)
              s3=boto3.client('s3')
              Client = boto3.client('glue')
              s3_records=event["Records"][0]
              print(s3_records)
              bucket_name= str(s3_records["s3"]["bucket"]["name"])
              file_name= str(s3_records["s3"]["object"]["key"])
              file_obj=s3.get_object(Bucket=bucket_name,Key=file_name)
              print(file_obj)
              print(file_name)
              file_content = file_obj["Body"].read().decode('utf-8')
              print(file_content)
      try:
           response = Client.start_crawler(Name='ctg-fis-cra-razee')
           time.sleep(30)
      except Exception as ex:
           print(ex)
  
      Description: Invoke a function during stack creation.
  Mys3bucket: 
    Type: 'AWS::S3::Bucket'
    Properties: 
      BucketName: hatna007
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt [ ExampleLambdaFunction, Arn]
  ExampleInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Fn::GetAtt:
          - ExampleLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::hatna007

